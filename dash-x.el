;;; dash-x.el --- Description -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2024 Benjamin Andresen
;;
;; Author: Benjamin Andresen <b@lambda.icu>
;; Maintainer: Benjamin Andresen <b@lambda.icu>
;; Created: August 19, 2024
;; Modified: August 19, 2024
;; Version: 0.0.1
;; Package-Requires: ((emacs "24.3"))
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;;  Description
;;
;;; Code:

(defvar dash-x-tests-enabled nil)

(defmacro -comment (&rest _body)
  nil)

(defmacro -tests (&rest body)
  "Run a series of ERT tests defined in BODY.
Each test is defined by a series of setup forms followed by a comparison
using the := symbol. The left-hand side of := is the expression to test,
and the right-hand side is the expected result.

Example usage:
(-tests
 (setq x 10)
 (setq y 20)
 (+ x y) := 30
 (- y x) := 10)

This macro is only active when `dash-x-tests-enabled' is non-nil.
It returns a string summarizing the test results."
  (when (bound-and-true-p dash-x-tests-enabled)
    (let ((setup-forms '())
          (test-forms '())
          (test-names '()))
      (while body
        (let ((form (pop body)))
          (if (eq form :=)
              (let ((lhs (pop setup-forms))
                    (rhs (pop body))
                    (test-name (gensym "autogenerated-test-")))
                (push test-name test-names)
                (push `(ert-deftest ,test-name ()
                         (should (equal ,lhs ,rhs)))
                      test-forms))
            (push form setup-forms))))
      `(progn
         ,@(nreverse setup-forms)
         ,@(nreverse test-forms)
         (let ((messages '())
               (orig-message (symbol-function 'message)))
           (cl-letf (((symbol-function 'message)
                      (lambda (format-string &rest args)
                        (push (apply #'format format-string args) messages))))
             (ert-run-tests-batch '(or ,@(nreverse test-names))))
           (let ((result-line (car (-filter (lambda (msg) (s-contains? "Ran " msg))
                                            (nreverse messages)))))
             (if result-line
                 (s-trim result-line)
               "No test results found")))))))

(defun -tests-enable! ()
  (setq dash-x-tests-enabled t))

(defun -slurp (filename)
  (with-temp-buffer
    (insert-file-contents filename)
    (buffer-substring-no-properties
     (point-min)
     (point-max))))

(provide 'dash-x)
;;; dash-x.el ends here
